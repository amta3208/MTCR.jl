function [levels,species] = readLevelsMTCR(statesPath,species)
% Read electronic state information from enex  .dat files generated by MTCR
% in the /output/states folder. Then read rovibrational state information
% from enrv  .dat files generated by MTCR in the /output/states folder.

  % Save current path for later return
  runPath = pwd;

  % Extract species names 
  spnm = species.spnm;
  ies = species.ies;
  NS = length(ies);
  mex = zeros(1,NS);
  
  % Change to the states output folder 
  cd(statesPath)
  
  % Read the enex files
  for s = 1:NS
    if ~strcmp(spnm(s),'E')
      fname = sprintf('enex%02d.dat',s);
      fh = fopen(fname);
      if (fh == -1)
        continue
      end
      i = 0;
      while ~feof(fh)
        i = i + 1;
        line = strtrim(fgetl(fh));
        splitLine = split(line);
        levels.(spnm{s}).i(i) = str2double(splitLine{1});
        levels.(spnm{s}).g(i) = str2double(splitLine{2});
        levels.(spnm{s}).energy(i) = str2double(splitLine{3});
        levels.(spnm{s}).factr = species.factr(s);
        mex(s) = mex(s) + 1;
      end
      fclose(fh);
    else
      mex(s) = 1;
    end
    levels.(spnm{s}).mex = mex(s);
  end
  
  % Useful to have mex in species as well
  species.mex = mex;
  species.ivs = zeros(max(mex),NS);

  % Now read the rovibrational states 
  for s = 1:NS
    fname = sprintf('enrv%02d.dat',s);
    fh = fopen(fname);
    if (fh == -1)
      continue
    end
    iex = 0;
    while ~feof(fh)
      line = strtrim(fgetl(fh));
      if strcmp2(line,'zone','start') % beginning of new electronic state
        iex = iex + 1;
        ivx = -1;
        line = strtrim(fgetl(fh));
      end
      splitLine = split(line);
      irx = str2double(splitLine{1});
      grv = str2double(splitLine{2});
      enrvx = str2double(splitLine{3});
      enrv = enrvx;
      if irx == 0
        ivx = ivx + 1;
        evx = enrv;
        levels.(spnm{s}).ivx{iex}(ivx+1) = ivx;
        levels.(spnm{s}).envx{iex}(ivx+1) = enrv;
        levels.(spnm{s}).irx{ivx+1,iex}(irx+1) = irx;
        levels.(spnm{s}).grv{ivx+1,iex}(irx+1) = grv;
        levels.(spnm{s}).enrx{ivx+1,iex}(irx+1) = 0.0;
      else
        levels.(spnm{s}).irx{ivx+1,iex}(irx+1) = irx;
        levels.(spnm{s}).grv{ivx+1,iex}(irx+1) = grv;
        levels.(spnm{s}).enrx{ivx+1,iex}(irx+1) = enrv - evx;
      end
    end
    fclose(fh);
    for iex = 1:mex(s)
      mv = length(levels.(spnm{s}).ivx{iex});
      levels.(spnm{s}).mv(iex) = mv;
      for ivx = 1:mv-1
        levels.(spnm{s}).mj(ivx,iex) = length(levels.(spnm{s}).irx{ivx,iex});
      end 
      if isfield(levels.(spnm{s}),'energy')
        enex = levels.(spnm{s}).energy(iex);
        levels.(spnm{s}).envx{iex} = levels.(spnm{s}).envx{iex} - enex;
      end
    end
  end
  
  % Return to original directory
  cd(runPath)
end

