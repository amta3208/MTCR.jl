var documenterSearchIndex = {"docs":
[{"location":"#MTCR","page":"Home","title":"MTCR","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MTCR.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#MTCR.MTCRConfig","page":"Home","title":"MTCR.MTCRConfig","text":"Main configuration struct for MTCR simulations.\n\nFields\n\nspecies::Vector{String}: Species names\nmole_fractions::Vector{Float64}: Initial mole fractions\ntotal_number_density::Float64: Total number density (1/cm³)\ntemperatures::TemperatureConfig: Temperature configuration\ntime_params::TimeIntegrationConfig: Time integration parameters\nphysics::PhysicsConfig: Physics modeling options\nprocesses::ProcessConfig: Process flags\ndatabase_path::String: Path to chemistry database\nlibrary_path::String: Path to MTCR shared library\ncase_path::String: Working directory for MTCR simulation\nunit_system::Symbol: Unit system (:SI or :CGS)\nvalidate_species_against_mtcr::Bool: Validate species against MTCR database\nprint_source_terms::Bool: Print source terms flag\n\n\n\n\n\n","category":"type"},{"location":"#MTCR.MTCRResults","page":"Home","title":"MTCR.MTCRResults","text":"Results container for MTCR simulations.\n\nFields\n\ntime::Vector{Float64}: Time points\nspecies_densities::Matrix{Float64}: Species densities over time\ntemperatures::NamedTuple: Temperature evolution\ntotal_energy::Vector{Float64}: Total energy evolution\nsource_terms::Union{NamedTuple, Nothing}: Source terms (if requested)\nsuccess::Bool: Simulation success flag\nmessage::String: Status message\n\n\n\n\n\n","category":"type"},{"location":"#MTCR.PhysicsConfig","page":"Home","title":"MTCR.PhysicsConfig","text":"Physics modeling configuration for MTCR simulation.\n\nFields\n\nbbh_model::Int: Bound-bound heavy particle model\nesc_model::Int: Escape model\nar_et_model::Int: Ar-ET model\neex_noneq::Int: Electron-electronic nonequilibrium flag\nev_relax_set::Int: Electron-vibrational relaxation set\net_relax_set::Int: Electron-translational relaxation set\nradiation_length::Float64: Radiation length scale (cm)\nget_electron_density_by_charge_balance::Bool: Electron density by charge balance\nmin_sts_frac::Float64: Minimum state-to-state fraction\nis_isothermal_teex::Bool: Isothermal electron-electronic flag\nenergy_loss_per_eii::Float64: Average electron energy loss per EII event (× E_ion)\n\n\n\n\n\n","category":"type"},{"location":"#MTCR.ProcessConfig","page":"Home","title":"MTCR.ProcessConfig","text":"Process flags configuration for MTCR simulation.\n\nFields\n\nconsider_elec_bbe::Int: Consider electron bound-bound excitation\nconsider_elec_bfe::Int: Consider electron bound-free excitation\nconsider_elec_bbh::Int: Consider electron bound-bound heavy\nconsider_elec_bfh::Int: Consider electron bound-free heavy\nconsider_rad::Int: Consider radiation\nconsider_rdr::Int: Consider RDR\nconsider_chem::Int: Consider chemistry\n\n\n\n\n\n","category":"type"},{"location":"#MTCR.TemperatureConfig","page":"Home","title":"MTCR.TemperatureConfig","text":"Temperature configuration for MTCR simulation.\n\nFields\n\nTt::Float64: Translational temperature (K)\nTv::Float64: Vibrational temperature (K)\nTee::Float64: Electron-electronic temperature (K)\nTe::Float64: Electron temperature (K)\n\n\n\n\n\n","category":"type"},{"location":"#MTCR.TimeIntegrationConfig","page":"Home","title":"MTCR.TimeIntegrationConfig","text":"Time integration configuration for MTCR simulation.\n\nAll time values are in seconds within the MTCR.jl wrapper. When writing Fortran input files, these values are converted to microseconds to match the MTCR input format requirements.\n\nFields\n\ndt::Float64: Time step (seconds)\ndtm::Float64: Output time step (seconds)\ntlim::Float64: Final time (seconds)\nnstep::Int: Maximum number of time steps\nmethod::Int: Integration method (0=forward Euler, 1=high order explicit, 2=implicit)\n\n\n\n\n\n","category":"type"},{"location":"#MTCR.calculate_electron_electronic_energy_wrapper-Tuple{Float64, Float64, Vector{Float64}}","page":"Home","title":"MTCR.calculate_electron_electronic_energy_wrapper","text":"calculate_electron_electronic_energy_wrapper(\n    teex,\n    tvib,\n    rho_sp\n)\n\n\nCalculate electron-electronic energy from state variables.\n\nArguments\n\nteex::Float64: Electron-electronic temperature (K)\ntvib::Float64: Vibrational temperature (K)\nrho_sp::Vector{Float64}: Species densities (mass/volume)\n\nReturns\n\nFloat64: Electron-electronic energy density\n\nThrows\n\nErrorException: If MTCR library is not loaded or not initialized\nArgumentError: If teex ≤ 0, tvib ≤ 0, or arrays are invalid\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.calculate_sources_wrapper-Tuple{Vector{Float64}, Float64}","page":"Home","title":"MTCR.calculate_sources_wrapper","text":"calculate_sources_wrapper(\n    rho_sp,\n    rho_etot;\n    rho_ex,\n    rho_vx,\n    rho_u,\n    rho_v,\n    rho_w,\n    rho_erot,\n    rho_eeex,\n    rho_evib\n)\n\n\nCalculate nonequilibrium source terms.\n\nArguments\n\nrho_sp::Vector{Float64}: Species densities (mass/volume)\nrho_etot::Float64: Total energy density\nrho_ex::Matrix{Float64}: Electronic state densities (optional)\nrho_vx::Array{Float64,3}: Vibrational state densities (optional)\nrho_erot::Float64: Rotational energy density (optional)\nrho_eeex::Float64: Electron-electronic energy density (optional)\nrho_evib::Float64: Vibrational energy density (optional)\n\nReturns\n\nTuple of derivative arrays corresponding to input arrays\n\nThrows\n\nErrorException: If MTCR library is not loaded or not initialized\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.calculate_temperatures_wrapper-Tuple{Vector{Float64}, Float64}","page":"Home","title":"MTCR.calculate_temperatures_wrapper","text":"calculate_temperatures_wrapper(\n    rho_sp,\n    rho_etot;\n    rho_ex,\n    rho_vx,\n    rho_u,\n    rho_v,\n    rho_w,\n    rho_erot,\n    rho_eeex,\n    rho_evib\n)\n\n\nCalculate temperatures from thermodynamic state.\n\nArguments\n\nrho_sp::Vector{Float64}: Species densities\nrho_etot::Float64: Total energy density\nAdditional optional energy components\n\nReturns\n\nNamed tuple with temperatures (tt, trot, teex, tvib, tex, tvx)\n\nThrows\n\nErrorException: If MTCR library is not loaded or not initialized\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.calculate_total_energy_wrapper-Tuple{Float64, Vector{Float64}}","page":"Home","title":"MTCR.calculate_total_energy_wrapper","text":"calculate_total_energy_wrapper(\n    tt,\n    rho_sp;\n    rho_ex,\n    rho_vx,\n    u,\n    v,\n    w,\n    rho_erot,\n    rho_eeex,\n    rho_evib\n)\n\n\nCalculate total energy from state variables.\n\nArguments\n\ntt::Float64: Translational temperature (K)\nrho_sp::Vector{Float64}: Species densities (mass/volume)\nrho_ex::Matrix{Float64}: Electronic state densities (optional)\nrho_vx::Array{Float64,3}: Vibrational state densities (optional)\nu::Float64: x-velocity component (optional)\nv::Float64: y-velocity component (optional)\nw::Float64: z-velocity component (optional)\nrho_erot::Float64: Rotational energy density (optional)\nrho_eeex::Float64: Electron-electronic energy density (optional)\nrho_evib::Float64: Vibrational energy density (optional)\n\nReturns\n\nFloat64: Total energy density\n\nThrows\n\nErrorException: If MTCR library is not loaded or not initialized\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.calculate_vibrational_energy_wrapper-Tuple{Float64, Vector{Float64}}","page":"Home","title":"MTCR.calculate_vibrational_energy_wrapper","text":"calculate_vibrational_energy_wrapper(\n    tvib,\n    rho_sp;\n    rho_ex,\n    tex,\n    teex\n)\n\n\nCalculate vibrational energy from state variables.\n\nArguments\n\ntvib::Float64: Vibrational temperature (K)\nrho_sp::Vector{Float64}: Species densities (mass/volume)\nrho_ex::Matrix{Float64}: Electronic state densities (optional)\ntex::Vector{Float64}: Electronic temperatures per species (optional)\nteex::Float64: Electron-electronic temperature (optional)\n\nReturns\n\nFloat64: Vibrational energy density\n\nThrows\n\nErrorException: If MTCR library is not loaded or not initialized\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.close_mtcr_library-Tuple{}","page":"Home","title":"MTCR.close_mtcr_library","text":"close_mtcr_library()\n\n\nClose the MTCR library and free resources.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.config_to_initial_state-Tuple{MTCRConfig}","page":"Home","title":"MTCR.config_to_initial_state","text":"config_to_initial_state(config)\n\n\nConvert MTCRConfig to initial state vectors for MTCR.\n\nArguments\n\nconfig::MTCRConfig: Configuration object\n\nReturns\n\nNamed tuple with initial state vectors in CGS units (as required by MTCR)\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_config_units-Tuple{MTCRConfig, Symbol}","page":"Home","title":"MTCR.convert_config_units","text":"convert_config_units(config, target_unit_system)\n\n\nConvert configuration units if needed.\n\nArguments\n\nconfig::MTCRConfig: Configuration to convert\ntarget_unit_system::Symbol: Target unit system (:SI or :CGS)\n\nReturns\n\nMTCRConfig: Configuration with converted units\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_density_cgs_to_si-Tuple{AbstractVector{<:Real}}","page":"Home","title":"MTCR.convert_density_cgs_to_si","text":"convert_density_cgs_to_si(rho_cgs)\n\n\nConvert species densities from CGS (g/cm³) to SI (kg/m³) units.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_density_si_to_cgs-Tuple{AbstractVector{<:Real}}","page":"Home","title":"MTCR.convert_density_si_to_cgs","text":"convert_density_si_to_cgs(rho_si)\n\n\nConvert species densities from SI (kg/m³) to CGS (g/cm³) units.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_energy_density_cgs_to_si-Tuple{Real}","page":"Home","title":"MTCR.convert_energy_density_cgs_to_si","text":"convert_energy_density_cgs_to_si(energy_cgs)\n\n\nConvert energy density from CGS (erg/cm³) to SI (J/m³) units.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_energy_density_si_to_cgs-Tuple{Real}","page":"Home","title":"MTCR.convert_energy_density_si_to_cgs","text":"convert_energy_density_si_to_cgs(energy_si)\n\n\nConvert energy density from SI (J/m³) to CGS (erg/cm³) units.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_number_density_cgs_to_si-Tuple{Real}","page":"Home","title":"MTCR.convert_number_density_cgs_to_si","text":"convert_number_density_cgs_to_si(n_cgs)\n\n\nConvert number density from CGS (1/cm³) to SI (1/m³) units.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_number_density_si_to_cgs-Tuple{Real}","page":"Home","title":"MTCR.convert_number_density_si_to_cgs","text":"convert_number_density_si_to_cgs(n_si)\n\n\nConvert number density from SI (1/m³) to CGS (1/cm³) units.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_pressure_cgs_to_si-Tuple{Real}","page":"Home","title":"MTCR.convert_pressure_cgs_to_si","text":"convert_pressure_cgs_to_si(pressure_cgs)\n\n\nConvert pressure from CGS (dyne/cm²) to SI (Pa) units.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_pressure_si_to_cgs-Tuple{Real}","page":"Home","title":"MTCR.convert_pressure_si_to_cgs","text":"convert_pressure_si_to_cgs(pressure_si)\n\n\nConvert pressure from SI (Pa) to CGS (dyne/cm²) units.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_sources_cgs_to_si-Tuple{AbstractVector{<:Real}, Real}","page":"Home","title":"MTCR.convert_sources_cgs_to_si","text":"convert_sources_cgs_to_si(\n    drho_sp_cgs,\n    drho_etot_cgs;\n    drho_erot_cgs,\n    drho_eeex_cgs,\n    drho_evib_cgs\n)\n\n\nConvert source terms from CGS to SI units.\n\nArguments\n\ndrho_sp_cgs::Vector{Float64}: Species source terms in CGS units (g/cm³/s)\ndrho_etot_cgs::Float64: Energy source term in CGS units (erg/cm³/s)\nAdditional optional source terms in CGS units\n\nReturns\n\nNamed tuple with all source terms converted to SI units\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_state_cgs_to_si-Tuple{AbstractVector{<:Real}, Real}","page":"Home","title":"MTCR.convert_state_cgs_to_si","text":"convert_state_cgs_to_si(\n    rho_sp_cgs,\n    rho_etot_cgs;\n    rho_erot_cgs,\n    rho_eeex_cgs,\n    rho_evib_cgs\n)\n\n\nConvert a complete state vector from CGS to SI units from MTCR output.\n\nArguments\n\nrho_sp_cgs::Vector{Float64}: Species densities in CGS units (g/cm³)\nrho_etot_cgs::Float64: Total energy density in CGS units (erg/cm³)\nAdditional optional energy components in CGS units\n\nReturns\n\nNamed tuple with all quantities converted to SI units\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_state_si_to_cgs-Tuple{AbstractVector{<:Real}, Real, Real}","page":"Home","title":"MTCR.convert_state_si_to_cgs","text":"convert_state_si_to_cgs(\n    rho_sp_si,\n    rho_etot_si,\n    number_density_si;\n    rho_erot_si,\n    rho_eeex_si,\n    rho_evib_si\n)\n\n\nConvert a complete state vector from SI to CGS units for MTCR input.\n\nArguments\n\nrho_sp_si::Vector{Float64}: Species densities in SI units (kg/m³)\nrho_etot_si::Float64: Total energy density in SI units (J/m³)\nnumber_density_si::Float64: Total number density in SI units (1/m³)\nAdditional optional energy components in SI units\n\nReturns\n\nNamed tuple with all quantities converted to CGS units\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.create_species_mapping-Tuple{Vector{String}, Vector{String}}","page":"Home","title":"MTCR.create_species_mapping","text":"create_species_mapping(ht_species, mtcr_species)\n\n\nCreate species mapping between HallThruster.jl and MTCR conventions.\n\nArguments\n\nht_species::Vector{String}: Species names in HallThruster.jl format\nmtcr_species::Vector{String}: Species names in MTCR format\n\nReturns\n\nDictionary mapping HallThruster.jl species names to MTCR species names\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.expected_state_length-Tuple{Any}","page":"Home","title":"MTCR.expected_state_length","text":"expected_state_length(dimensions)\n\n\nCompute the expected state vector length for a given dimensions tuple.\n\nArguments\n\ndimensions: Dimensions structure from get_state_dimensions()\n\nReturns\n\nInt: Expected length of packed state/derivative vectors\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.finalize_api_wrapper-Tuple{}","page":"Home","title":"MTCR.finalize_api_wrapper","text":"finalize_api_wrapper()\n\n\nFinalize the MTCR API system and clean up resources.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.finalize_mtcr-Tuple{}","page":"Home","title":"MTCR.finalize_mtcr","text":"finalize_mtcr()\n\n\nFinalize the MTCR system and clean up resources.\n\nThis function should be called when MTCR is no longer needed to properly clean up memory and resources.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.generate_input_files","page":"Home","title":"MTCR.generate_input_files","text":"generate_input_files(config)\ngenerate_input_files(config, case_path)\n\n\nGenerate MTCR input files from configuration with proper directory structure.\n\nThis function creates the directory structure required by the Fortran wrapper:\n\ncase_path/input/     (input files)\ncase_path/output/    (output files)\ncase_path/output/sources/  (source term outputs)\ncase_path/output/states/   (state outputs)\n\nArguments\n\nconfig::MTCRConfig: MTCR configuration\ncase_path::String: Case directory path (default: config.case_path)\n\nReturns\n\ntrue if files generated successfully\n\nThrows\n\nErrorException if file generation fails\n\n\n\n\n\n","category":"function"},{"location":"#MTCR.generate_prob_setup_file-Tuple{MTCRConfig, String}","page":"Home","title":"MTCR.generate_prob_setup_file","text":"generate_prob_setup_file(config, filepath)\n\n\nGenerate prob_setup.inp file from configuration.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.generate_sources_setup_file-Tuple{MTCRConfig, String}","page":"Home","title":"MTCR.generate_sources_setup_file","text":"generate_sources_setup_file(config, filepath)\n\n\nGenerate sources_setup.inp file from configuration.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.generate_tau_scaling_file-Tuple{MTCRConfig, String}","page":"Home","title":"MTCR.generate_tau_scaling_file","text":"generate_tau_scaling_file(config, filepath)\n\n\nGenerate tau_scaling.inp file from configuration.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_max_number_of_atomic_electronic_states_wrapper-Tuple{}","page":"Home","title":"MTCR.get_max_number_of_atomic_electronic_states_wrapper","text":"get_max_number_of_atomic_electronic_states_wrapper()\n\n\nGet the maximum number of electronic states per atomic species supported by MTCR.\n\nReturns\n\nInt32: Maximum number of atomic electronic states\n\nThrows\n\nErrorException: If MTCR library is not loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_max_number_of_molecular_electronic_states_wrapper-Tuple{}","page":"Home","title":"MTCR.get_max_number_of_molecular_electronic_states_wrapper","text":"get_max_number_of_molecular_electronic_states_wrapper()\n\n\nGet the maximum number of electronic states per molecular species supported by MTCR.\n\nReturns\n\nInt32: Maximum number of molecular electronic states\n\nThrows\n\nErrorException: If MTCR library is not loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_max_number_of_species_wrapper-Tuple{}","page":"Home","title":"MTCR.get_max_number_of_species_wrapper","text":"get_max_number_of_species_wrapper()\n\n\nGet the maximum number of species supported by MTCR.\n\nReturns\n\nInt32: Maximum number of species\n\nThrows\n\nErrorException: If MTCR library is not loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_max_vibrational_quantum_number_wrapper-Tuple{}","page":"Home","title":"MTCR.get_max_vibrational_quantum_number_wrapper","text":"get_max_vibrational_quantum_number_wrapper()\n\n\nGet the maximum vibrational quantum number supported by MTCR.\n\nReturns\n\nInt32: Maximum vibrational quantum number (mnv from Fortran parameters)\n\nThrows\n\nErrorException: If MTCR library is not loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_molecular_weights-Tuple{Vector{String}}","page":"Home","title":"MTCR.get_molecular_weights","text":"get_molecular_weights(species)\n\n\nGet molecular weights for common species (g/mol).\n\nArguments\n\nspecies::Vector{String}: Species names\n\nReturns\n\nVector{Float64}: Molecular weights in g/mol\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_mtcr_handle-Tuple{}","page":"Home","title":"MTCR.get_mtcr_handle","text":"get_mtcr_handle()\n\n\nGet the handle to the loaded MTCR library.\n\nReturns\n\nPtr{Cvoid}: Handle to the loaded library\n\nThrows\n\nErrorException: If no library is loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_mtcr_lib_path-Tuple{}","page":"Home","title":"MTCR.get_mtcr_lib_path","text":"get_mtcr_lib_path()\n\n\nGet the path to the loaded MTCR library.\n\nReturns\n\nString: Path to the loaded library\n\nThrows\n\nErrorException: If no library is loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_number_of_active_species_wrapper-Tuple{}","page":"Home","title":"MTCR.get_number_of_active_species_wrapper","text":"get_number_of_active_species_wrapper()\n\n\nGet the active number of species (nsp) from MTCR.\n\nReturns\n\nInt32: Active species count\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_number_of_dimensions_wrapper-Tuple{}","page":"Home","title":"MTCR.get_number_of_dimensions_wrapper","text":"get_number_of_dimensions_wrapper()\n\n\nGet the number of spatial dimensions (nd) from MTCR.\n\nReturns\n\nInt32: Number of spatial dimensions\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_runtime_flags-Tuple{}","page":"Home","title":"MTCR.get_runtime_flags","text":"get_runtime_flags()\n\n\nGet runtime setup flags from MTCR (for verification).\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_species_name_length_wrapper-Tuple{}","page":"Home","title":"MTCR.get_species_name_length_wrapper","text":"get_species_name_length_wrapper()\n\n\nGet the fixed species-name length (nmlen) used by the Fortran API.\n\nReturns\n\nInt32: Name buffer length per species\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_species_names_wrapper-Tuple{}","page":"Home","title":"MTCR.get_species_names_wrapper","text":"get_species_names_wrapper()\n\n\nGet species names from MTCR.\n\nReturns\n\nVector{String}: Array of species names\n\nThrows\n\nErrorException: If MTCR library is not loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_state_dimensions-Tuple{MTCRConfig}","page":"Home","title":"MTCR.get_state_dimensions","text":"get_state_dimensions(config)\n\n\nCalculate dimensions for the ODE state vector components.\n\nArguments\n\nconfig::MTCRConfig: Configuration object\n\nReturns\n\nNamed tuple with dimensions for each component\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.initialize_api_wrapper-Tuple{}","page":"Home","title":"MTCR.initialize_api_wrapper","text":"initialize_api_wrapper(; case_path)\n\n\nInitialize the MTCR API system.\n\nArguments\n\ncase_path::String: Path to directory containing input/ subdirectory (default: current directory)\n\nReturns\n\nNamedTuple: Contains num_species and num_dimensions as determined by MTCR from input files\n\nThrows\n\nErrorException: If case_path doesn't exist, input file is missing, or Fortran call fails\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.initialize_mtcr","page":"Home","title":"MTCR.initialize_mtcr","text":"initialize_mtcr(lib_path, config)\ninitialize_mtcr(lib_path, config, case_path)\n\n\nInitialize the MTCR system.\n\nThis function must be called before any MTCR calculations can be performed. It sets up the Fortran library, initializes internal data structures, and prepares the system for simulation.\n\nArguments\n\nlib_path::String: Path to the MTCR shared library\nconfig::MTCRConfig: Configuration for initialization\ncase_path::String: Case directory path (optional, defaults to config.case_path)\n\nReturns\n\ntrue if initialization successful\n\nThrows\n\nErrorException if initialization fails\n\n\n\n\n\n","category":"function"},{"location":"#MTCR.integrate_0d_system-Tuple{MTCRConfig, Any}","page":"Home","title":"MTCR.integrate_0d_system","text":"integrate_0d_system(config, initial_state)\n\n\nIntegrate the 0D system over time using DifferentialEquations.jl.\n\nArguments\n\nconfig::MTCRConfig: Configuration object\ninitial_state: Initial state vectors in CGS units\n\nReturns\n\nMTCRResults: Simulation results (converted back to SI units)\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.is_api_initialized_wrapper-Tuple{}","page":"Home","title":"MTCR.is_api_initialized_wrapper","text":"is_api_initialized_wrapper()\n\n\nReturn whether the MTCR Fortran API reports itself initialized.\n\nReturns\n\nBool: True if Fortran side is initialized, false otherwise\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.is_mtcr_initialized-Tuple{}","page":"Home","title":"MTCR.is_mtcr_initialized","text":"is_mtcr_initialized()\n\n\nCheck if MTCR is properly initialized.\n\nReturns\n\ntrue if MTCR is initialized and ready for use\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.is_mtcr_loaded-Tuple{}","page":"Home","title":"MTCR.is_mtcr_loaded","text":"is_mtcr_loaded()\n\n\nCheck if the MTCR library is currently loaded.\n\nReturns\n\nBool: True if library is loaded, false otherwise\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.load_mtcr_library!-Tuple{String}","page":"Home","title":"MTCR.load_mtcr_library!","text":"load_mtcr_library!(path)\n\n\nSet the path to the MTCR shared library and load it.\n\nArguments\n\npath::String: Path to the MTCR shared library file\n\nThrows\n\nErrorException: If the library cannot be loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.mass_densities_to_mole_fractions-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"Home","title":"MTCR.mass_densities_to_mole_fractions","text":"mass_densities_to_mole_fractions(\n    mass_densities,\n    molecular_weights\n)\n\n\nConvert mass densities to mole fractions.\n\nArguments\n\nmass_densities::Vector{Float64}: Species mass densities (g/cm³)\nmolecular_weights::Vector{Float64}: Species molecular weights (g/mol)\n\nReturns\n\nVector of mole fractions\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.mole_fractions_to_mass_densities-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}, Real}","page":"Home","title":"MTCR.mole_fractions_to_mass_densities","text":"mole_fractions_to_mass_densities(\n    mole_fractions,\n    molecular_weights,\n    total_number_density\n)\n\n\nConvert mole fractions to mass densities.\n\nArguments\n\nmole_fractions::Vector{Float64}: Species mole fractions\nmolecular_weights::Vector{Float64}: Species molecular weights (g/mol)\ntotal_number_density::Float64: Total number density (1/cm³)\n\nReturns\n\nVector of mass densities (g/cm³)\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.mtcr_ode_system!-Tuple{Vector{Float64}, Vector{Float64}, Any, Float64}","page":"Home","title":"MTCR.mtcr_ode_system!","text":"mtcr_ode_system!(du, u, p, t)\n\n\nODE system function for MTCR integration.\n\nThis function defines the ODE system du/dt = f(u, p, t) where:\n\nu is the state vector containing all MTCR variables\np contains parameters (dimensions, etc.)\nt is time\n\nArguments\n\ndu::Vector{Float64}: Output derivative vector\nu::Vector{Float64}: Input state vector\np: Parameters structure\nt::Float64: Current time\n\nReturns\n\nNothing (modifies du in-place)\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.nitrogen_10ev_config-Tuple{}","page":"Home","title":"MTCR.nitrogen_10ev_config","text":"nitrogen_10ev_config()\n\n\nCreate a default configuration for the 0D Nitrogen Te=10eV example.\n\nReturns\n\nMTCRConfig: Configuration matching the example case\n\nThrows\n\nErrorException if required library or database paths do not exist\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.nitrogen_10ev_example","page":"Home","title":"MTCR.nitrogen_10ev_example","text":"nitrogen_10ev_example(lib_path)\nnitrogen_10ev_example(lib_path, case_path)\n\n\nRun the 0D Nitrogen Te=10eV example case.\n\nThis function provides a convenient way to run the reference test case that matches the MTCR example in /mtcr/examples/0D_Nitrogen_Te_10eV.\n\nArguments\n\nlib_path::String: Path to MTCR shared library\ncase_path::String: Case directory path (optional, creates temp directory if not provided)\n\nReturns\n\nMTCRResults: Results of the simulation\n\nExample\n\nresults = nitrogen_10ev_example(\"/path/to/libmtcr.so\")\n\n\n\n\n\n","category":"function"},{"location":"#MTCR.pack_derivative_vector!-Tuple{Vector{Float64}, Any, Any}","page":"Home","title":"MTCR.pack_derivative_vector!","text":"pack_derivative_vector!(du, derivatives, dimensions)\n\n\nPack derivative components into ODE derivative vector.\n\nArguments\n\ndu::Vector{Float64}: Output derivative vector (modified in-place)\nderivatives: Derivatives from calculatesourceswrapper()\ndimensions: Dimensions structure\n\nReturns\n\nNothing (modifies du in-place)\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.pack_state_vector-Tuple{Vector{Float64}, Float64, Any}","page":"Home","title":"MTCR.pack_state_vector","text":"pack_state_vector(\n    rho_sp,\n    rho_etot,\n    dimensions;\n    rho_ex,\n    rho_vx,\n    rho_u,\n    rho_v,\n    rho_w,\n    rho_erot,\n    rho_eeex,\n    rho_evib\n)\n\n\nPack state components into a single ODE state vector.\n\nArguments\n\nrho_sp::Vector{Float64}: Species densities\nrho_etot::Float64: Total energy density\ndimensions: Dimensions structure from getstatedimensions()\nOptional components (all default to zero if not provided)\n\nReturns\n\nVector{Float64}: Packed state vector\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.prepare_arrays_for_fortran-Tuple","page":"Home","title":"MTCR.prepare_arrays_for_fortran","text":"prepare_arrays_for_fortran(arrays)\n\n\nPrepare Julia arrays for passing to Fortran.\n\nFortran expects column-major arrays, which Julia uses natively. This function ensures proper memory layout and type consistency.\n\nArguments\n\narrays...: Variable number of Julia arrays to prepare\n\nReturns\n\nTuple of arrays ready for Fortran ccall\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.save_results-Tuple{MTCRResults, String}","page":"Home","title":"MTCR.save_results","text":"save_results(results, filename)\n\n\nSave MTCR results to file.\n\nArguments\n\nresults::MTCRResults: Results to save\nfilename::String: Output filename (CSV format)\n\nReturns\n\ntrue if save successful\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.set_api_debug_wrapper-Tuple{Bool}","page":"Home","title":"MTCR.set_api_debug_wrapper","text":"set_api_debug_wrapper(enable)\n\n\nControl whether the Fortran interface emits additional debug prints.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.set_api_finalize_mpi_wrapper-Tuple{Bool}","page":"Home","title":"MTCR.set_api_finalize_mpi_wrapper","text":"set_api_finalize_mpi_wrapper(enable)\n\n\nControl whether finalizeapi() will call MPIFinalize on the Fortran side. Default is true; tests may disable it to allow reinitialization in one process.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.set_electronic_boltzmann_wrapper-Tuple{Vector{Float64}, Float64, Float64, Float64}","page":"Home","title":"MTCR.set_electronic_boltzmann_wrapper","text":"set_electronic_boltzmann_wrapper(rho_sp, tex, trot, tvib)\n\n\nSet electronic state densities to Boltzmann distribution.\n\nArguments\n\nrho_sp::Vector{Float64}: Species densities (mass/volume)\ntex::Float64: Electronic temperature (K)\ntrot::Float64: Rotational temperature (K)\ntvib::Float64: Vibrational temperature (K)\n\nReturns\n\nMatrix{Float64}: Electronic state densities in Boltzmann distribution\n\nThrows\n\nErrorException: If MTCR library is not loaded or not initialized\nArgumentError: If temperatures ≤ 0 or arrays are invalid\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.set_vibrational_boltzmann_wrapper-Tuple{Matrix{Float64}, Float64, Float64, Float64}","page":"Home","title":"MTCR.set_vibrational_boltzmann_wrapper","text":"set_vibrational_boltzmann_wrapper(rho_ex, tex, trot, tvib)\n\n\nSet vibrational state densities to a Boltzmann distribution given rho_ex.\n\nArguments\n\nrho_ex::Matrix{Float64}: Electronic state densities (mass/volume)\ntex::Float64: Electronic temperature (K)\ntrot::Float64: Rotational temperature (K)\ntvib::Float64: Vibrational temperature (K)\n\nReturns\n\nArray{Float64,3}: Vibrational state densities (0:mnv, mmnex, mnsp)\n\nThrows\n\nErrorException: If MTCR library is not loaded or not initialized\nArgumentError: If temperatures ≤ 0 or arrays are invalid\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.set_wrapper_debug!-Tuple{Bool}","page":"Home","title":"MTCR.set_wrapper_debug!","text":"set_wrapper_debug!(flag)\n\n\nEnable or disable verbose wrapper debug logging.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.solve_mtcr_0d-Tuple{MTCRConfig}","page":"Home","title":"MTCR.solve_mtcr_0d","text":"solve_mtcr_0d(config)\n\n\nSolve a 0D MTCR simulation.\n\nThis is the main high-level interface for running MTCR simulations. It handles all the complexity of data conversion, Fortran interfacing, and result processing.\n\nArguments\n\nconfig::MTCRConfig: Configuration for the simulation\n\nReturns\n\nMTCRResults: Results of the simulation\n\nThrows\n\nErrorException if MTCR not initialized or simulation fails\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.unpack_state_vector-Tuple{Vector{Float64}, Any}","page":"Home","title":"MTCR.unpack_state_vector","text":"unpack_state_vector(u, dimensions)\n\n\nUnpack ODE state vector into individual components.\n\nArguments\n\nu::Vector{Float64}: Packed state vector\ndimensions: Dimensions structure from getstatedimensions()\n\nReturns\n\nNamed tuple with unpacked components\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.validate_array_dimensions-Tuple{MTCRConfig}","page":"Home","title":"MTCR.validate_array_dimensions","text":"validate_array_dimensions(config)\n\n\nValidate that configuration arrays match MTCR Fortran expectations.\n\nArguments\n\nconfig::MTCRConfig: Configuration to validate\n\nReturns\n\ntrue if validation passes\n\nThrows\n\nErrorException if array dimensions exceed MTCR limits\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.validate_config-Tuple{Vector{String}, Vector{Float64}, Float64, MTCR.TemperatureConfig, MTCR.TimeIntegrationConfig, String, String, Symbol}","page":"Home","title":"MTCR.validate_config","text":"validate_config(\n    species,\n    mole_fractions,\n    total_number_density,\n    temperatures,\n    time_params,\n    library_path,\n    case_path,\n    unit_system\n)\n\n\nValidate MTCR configuration parameters.\n\nArguments\n\nspecies::Vector{String}: Species names\nmole_fractions::Vector{Float64}: Initial mole fractions\ntotal_number_density::Float64: Total number density\ntemperatures::TemperatureConfig: Temperature configuration\ntime_params::TimeIntegrationConfig: Time integration parameters\nlibrary_path::String: Path to MTCR shared library\ncase_path::String: Working directory path\nunit_system::Symbol: Unit system specification\n\nThrows\n\nArgumentError if validation fails\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.validate_config_against_mtcr-Tuple{MTCRConfig}","page":"Home","title":"MTCR.validate_config_against_mtcr","text":"validate_config_against_mtcr(config)\n\n\nValidate configuration parameters against loaded MTCR library capabilities.\n\nThis function checks that the configuration is compatible with the loaded MTCR library, including array dimensions and species availability.\n\nArguments\n\nconfig::MTCRConfig: Configuration to validate\n\nReturns\n\ntrue if validation passes\n\nThrows\n\nErrorException if validation fails or library not loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.validate_results-Tuple{MTCRResults}","page":"Home","title":"MTCR.validate_results","text":"validate_results(results)\n\n\nValidate simulation results for physical consistency.\n\nArguments\n\nresults::MTCRResults: Simulation results to validate\n\nReturns\n\ntrue if results pass validation, false otherwise\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.validate_species_against_mtcr_database-Tuple{MTCRConfig}","page":"Home","title":"MTCR.validate_species_against_mtcr_database","text":"validate_species_against_mtcr_database(config)\n\n\nValidate species against MTCR database (requires loaded library).\n\nThis function uses the fortran_wrapper to query the MTCR database for available species and validates the configuration species against it.\n\nArguments\n\nconfig::MTCRConfig: Configuration to validate\n\nReturns\n\ntrue if validation passes\n\nThrows\n\nErrorException if species validation fails or library not loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.validate_species_data-Tuple{Vector{String}, Vector{String}, Vector{Float64}}","page":"Home","title":"MTCR.validate_species_data","text":"validate_species_data(\n    species_names,\n    mtcr_species,\n    densities\n)\n\n\nValidate species data consistency between Julia and MTCR.\n\nArguments\n\nspecies_names::Vector{String}: Species names from configuration\nmtcr_species::Vector{String}: Species names from MTCR\ndensities::Vector{Float64}: Species densities\n\nReturns\n\ntrue if validation passes, throws error otherwise\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.validate_species_in_database-Tuple{MTCRConfig}","page":"Home","title":"MTCR.validate_species_in_database","text":"validate_species_in_database(config)\n\n\nValidate that all species in configuration exist in the MTCR database.\n\nArguments\n\nconfig::MTCRConfig: Configuration to validate\n\nReturns\n\ntrue if validation passes\n\nThrows\n\nErrorException if any species are not found in database\n\n\n\n\n\n","category":"method"}]
}
