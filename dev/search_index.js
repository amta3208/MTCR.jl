var documenterSearchIndex = {"docs":
[{"location":"#MTCR","page":"Home","title":"MTCR","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MTCR.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#MTCR.calculate_electron_electronic_energy_wrapper-Tuple{Float64, Float64, Vector{Float64}}","page":"Home","title":"MTCR.calculate_electron_electronic_energy_wrapper","text":"calculate_electron_electronic_energy_wrapper(\n    teex,\n    tvib,\n    rho_sp\n)\n\n\nCalculate electron-electronic energy from state variables.\n\nArguments\n\nteex::Float64: Electron-electronic temperature (K)\ntvib::Float64: Vibrational temperature (K)\nrho_sp::Vector{Float64}: Species densities (mass/volume)\n\nReturns\n\nFloat64: Electron-electronic energy density\n\nThrows\n\nErrorException: If MTCR library is not loaded or not initialized\nArgumentError: If teex ≤ 0, tvib ≤ 0, or arrays are invalid\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.calculate_sources_wrapper-Tuple{Vector{Float64}, Float64}","page":"Home","title":"MTCR.calculate_sources_wrapper","text":"calculate_sources_wrapper(\n    rho_sp,\n    rho_etot;\n    rho_ex,\n    rho_vx,\n    rho_u,\n    rho_v,\n    rho_w,\n    rho_erot,\n    rho_eeex,\n    rho_evib\n)\n\n\nCalculate nonequilibrium source terms.\n\nArguments\n\nrho_sp::Vector{Float64}: Species densities (mass/volume)\nrho_etot::Float64: Total energy density\nrho_ex::Matrix{Float64}: Electronic state densities (optional)\nrho_vx::Array{Float64,3}: Vibrational state densities (optional)\nrho_erot::Float64: Rotational energy density (optional)\nrho_eeex::Float64: Electron-electronic energy density (optional)\nrho_evib::Float64: Vibrational energy density (optional)\n\nReturns\n\nTuple of derivative arrays corresponding to input arrays\n\nThrows\n\nErrorException: If MTCR library is not loaded or not initialized\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.calculate_temperatures_wrapper-Tuple{Vector{Float64}, Float64}","page":"Home","title":"MTCR.calculate_temperatures_wrapper","text":"calculate_temperatures_wrapper(\n    rho_sp,\n    rho_etot;\n    rho_ex,\n    rho_vx,\n    rho_u,\n    rho_v,\n    rho_w,\n    rho_erot,\n    rho_eeex,\n    rho_evib\n)\n\n\nCalculate temperatures from thermodynamic state.\n\nArguments\n\nrho_sp::Vector{Float64}: Species densities\nrho_etot::Float64: Total energy density\nAdditional optional energy components\n\nReturns\n\nNamed tuple with temperatures (tt, trot, teex, tvib, tex, tvx)\n\nThrows\n\nErrorException: If MTCR library is not loaded or not initialized\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.calculate_total_energy_wrapper-Tuple{Float64, Vector{Float64}}","page":"Home","title":"MTCR.calculate_total_energy_wrapper","text":"calculate_total_energy_wrapper(\n    tt,\n    rho_sp;\n    rho_ex,\n    rho_vx,\n    u,\n    v,\n    w,\n    rho_erot,\n    rho_eeex,\n    rho_evib\n)\n\n\nCalculate total energy from state variables.\n\nArguments\n\ntt::Float64: Translational temperature (K)\nrho_sp::Vector{Float64}: Species densities (mass/volume)\nrho_ex::Matrix{Float64}: Electronic state densities (optional)\nrho_vx::Array{Float64,3}: Vibrational state densities (optional)\nu::Float64: x-velocity component (optional)\nv::Float64: y-velocity component (optional)\nw::Float64: z-velocity component (optional)\nrho_erot::Float64: Rotational energy density (optional)\nrho_eeex::Float64: Electron-electronic energy density (optional)\nrho_evib::Float64: Vibrational energy density (optional)\n\nReturns\n\nFloat64: Total energy density\n\nThrows\n\nErrorException: If MTCR library is not loaded or not initialized\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.calculate_vibrational_energy_wrapper-Tuple{Float64, Vector{Float64}}","page":"Home","title":"MTCR.calculate_vibrational_energy_wrapper","text":"calculate_vibrational_energy_wrapper(\n    tvib,\n    rho_sp;\n    rho_ex,\n    tex,\n    teex\n)\n\n\nCalculate vibrational energy from state variables.\n\nArguments\n\ntvib::Float64: Vibrational temperature (K)\nrho_sp::Vector{Float64}: Species densities (mass/volume)\nrho_ex::Matrix{Float64}: Electronic state densities (optional)\ntex::Vector{Float64}: Electronic temperatures per species (optional)\nteex::Float64: Electron-electronic temperature (optional)\n\nReturns\n\nFloat64: Vibrational energy density\n\nThrows\n\nErrorException: If MTCR library is not loaded or not initialized\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.close_mtcr_library-Tuple{}","page":"Home","title":"MTCR.close_mtcr_library","text":"close_mtcr_library()\n\n\nClose the MTCR library and free resources.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_density_cgs_to_si-Tuple{Vector{Float64}}","page":"Home","title":"MTCR.convert_density_cgs_to_si","text":"convert_density_cgs_to_si(rho_cgs)\n\n\nConvert species densities from CGS (g/cm³) to SI (kg/m³) units.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_density_si_to_cgs-Tuple{Vector{Float64}}","page":"Home","title":"MTCR.convert_density_si_to_cgs","text":"convert_density_si_to_cgs(rho_si)\n\n\nConvert species densities from SI (kg/m³) to CGS (g/cm³) units.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_energy_density_cgs_to_si-Tuple{Float64}","page":"Home","title":"MTCR.convert_energy_density_cgs_to_si","text":"convert_energy_density_cgs_to_si(energy_cgs)\n\n\nConvert energy density from CGS (erg/cm³) to SI (J/m³) units.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_energy_density_si_to_cgs-Tuple{Float64}","page":"Home","title":"MTCR.convert_energy_density_si_to_cgs","text":"convert_energy_density_si_to_cgs(energy_si)\n\n\nConvert energy density from SI (J/m³) to CGS (erg/cm³) units.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_number_density_cgs_to_si-Tuple{Float64}","page":"Home","title":"MTCR.convert_number_density_cgs_to_si","text":"convert_number_density_cgs_to_si(n_cgs)\n\n\nConvert number density from CGS (1/cm³) to SI (1/m³) units.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_number_density_si_to_cgs-Tuple{Float64}","page":"Home","title":"MTCR.convert_number_density_si_to_cgs","text":"convert_number_density_si_to_cgs(n_si)\n\n\nConvert number density from SI (1/m³) to CGS (1/cm³) units.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_pressure_cgs_to_si-Tuple{Float64}","page":"Home","title":"MTCR.convert_pressure_cgs_to_si","text":"convert_pressure_cgs_to_si(pressure_cgs)\n\n\nConvert pressure from CGS (dyne/cm²) to SI (Pa) units.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_pressure_si_to_cgs-Tuple{Float64}","page":"Home","title":"MTCR.convert_pressure_si_to_cgs","text":"convert_pressure_si_to_cgs(pressure_si)\n\n\nConvert pressure from SI (Pa) to CGS (dyne/cm²) units.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_sources_cgs_to_si-Tuple{Vector{Float64}, Float64}","page":"Home","title":"MTCR.convert_sources_cgs_to_si","text":"convert_sources_cgs_to_si(\n    drho_sp_cgs,\n    drho_etot_cgs;\n    drho_erot_cgs,\n    drho_eeex_cgs,\n    drho_evib_cgs\n)\n\n\nConvert source terms from CGS to SI units.\n\nArguments\n\ndrho_sp_cgs::Vector{Float64}: Species source terms in CGS units (g/cm³/s)\ndrho_etot_cgs::Float64: Energy source term in CGS units (erg/cm³/s)\nAdditional optional source terms in CGS units\n\nReturns\n\nNamed tuple with all source terms converted to SI units\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_state_cgs_to_si-Tuple{Vector{Float64}, Float64}","page":"Home","title":"MTCR.convert_state_cgs_to_si","text":"convert_state_cgs_to_si(\n    rho_sp_cgs,\n    rho_etot_cgs;\n    rho_erot_cgs,\n    rho_eeex_cgs,\n    rho_evib_cgs\n)\n\n\nConvert a complete state vector from CGS to SI units from MTCR output.\n\nArguments\n\nrho_sp_cgs::Vector{Float64}: Species densities in CGS units (g/cm³)\nrho_etot_cgs::Float64: Total energy density in CGS units (erg/cm³)\nAdditional optional energy components in CGS units\n\nReturns\n\nNamed tuple with all quantities converted to SI units\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.convert_state_si_to_cgs-Tuple{Vector{Float64}, Float64, Float64}","page":"Home","title":"MTCR.convert_state_si_to_cgs","text":"convert_state_si_to_cgs(\n    rho_sp_si,\n    rho_etot_si,\n    number_density_si;\n    rho_erot_si,\n    rho_eeex_si,\n    rho_evib_si\n)\n\n\nConvert a complete state vector from SI to CGS units for MTCR input.\n\nArguments\n\nrho_sp_si::Vector{Float64}: Species densities in SI units (kg/m³)\nrho_etot_si::Float64: Total energy density in SI units (J/m³)\nnumber_density_si::Float64: Total number density in SI units (1/m³)\nAdditional optional energy components in SI units\n\nReturns\n\nNamed tuple with all quantities converted to CGS units\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.create_species_mapping-Tuple{Vector{String}, Vector{String}}","page":"Home","title":"MTCR.create_species_mapping","text":"create_species_mapping(ht_species, mtcr_species)\n\n\nCreate species mapping between HallThruster.jl and MTCR conventions.\n\nArguments\n\nht_species::Vector{String}: Species names in HallThruster.jl format\nmtcr_species::Vector{String}: Species names in MTCR format\n\nReturns\n\nDictionary mapping HallThruster.jl species names to MTCR species names\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.finalize_api_wrapper-Tuple{}","page":"Home","title":"MTCR.finalize_api_wrapper","text":"finalize_api_wrapper()\n\n\nFinalize the MTCR API system and clean up resources.\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_max_number_of_atomic_electronic_states_wrapper-Tuple{}","page":"Home","title":"MTCR.get_max_number_of_atomic_electronic_states_wrapper","text":"get_max_number_of_atomic_electronic_states_wrapper()\n\n\nGet the maximum number of electronic states per atomic species supported by MTCR.\n\nReturns\n\nInt32: Maximum number of atomic electronic states\n\nThrows\n\nErrorException: If MTCR library is not loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_max_number_of_molecular_electronic_states_wrapper-Tuple{}","page":"Home","title":"MTCR.get_max_number_of_molecular_electronic_states_wrapper","text":"get_max_number_of_molecular_electronic_states_wrapper()\n\n\nGet the maximum number of electronic states per molecular species supported by MTCR.\n\nReturns\n\nInt32: Maximum number of molecular electronic states\n\nThrows\n\nErrorException: If MTCR library is not loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_max_number_of_species_wrapper-Tuple{}","page":"Home","title":"MTCR.get_max_number_of_species_wrapper","text":"get_max_number_of_species_wrapper()\n\n\nGet the maximum number of species supported by MTCR.\n\nReturns\n\nInt32: Maximum number of species\n\nThrows\n\nErrorException: If MTCR library is not loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_mtcr_handle-Tuple{}","page":"Home","title":"MTCR.get_mtcr_handle","text":"get_mtcr_handle()\n\n\nGet the handle to the loaded MTCR library.\n\nReturns\n\nPtr{Cvoid}: Handle to the loaded library\n\nThrows\n\nErrorException: If no library is loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_mtcr_lib_path-Tuple{}","page":"Home","title":"MTCR.get_mtcr_lib_path","text":"get_mtcr_lib_path()\n\n\nGet the path to the loaded MTCR library.\n\nReturns\n\nString: Path to the loaded library\n\nThrows\n\nErrorException: If no library is loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.get_species_names_wrapper-Tuple{}","page":"Home","title":"MTCR.get_species_names_wrapper","text":"get_species_names_wrapper()\n\n\nGet species names from MTCR.\n\nReturns\n\nVector{String}: Array of species names\n\nThrows\n\nErrorException: If MTCR library is not loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.initialize_api_wrapper-Tuple{}","page":"Home","title":"MTCR.initialize_api_wrapper","text":"initialize_api_wrapper(; case_path)\n\n\nInitialize the MTCR API system.\n\nArguments\n\ncase_path::String: Path to directory containing input/ subdirectory (default: current directory)\n\nReturns\n\nNamedTuple: Contains num_species and num_dimensions as determined by MTCR from input files\n\nThrows\n\nErrorException: If case_path doesn't exist, input file is missing, or Fortran call fails\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.is_mtcr_loaded-Tuple{}","page":"Home","title":"MTCR.is_mtcr_loaded","text":"is_mtcr_loaded()\n\n\nCheck if the MTCR library is currently loaded.\n\nReturns\n\nBool: True if library is loaded, false otherwise\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.load_mtcr_library!-Tuple{String}","page":"Home","title":"MTCR.load_mtcr_library!","text":"load_mtcr_library!(path)\n\n\nSet the path to the MTCR shared library and load it.\n\nArguments\n\npath::String: Path to the MTCR shared library file\n\nThrows\n\nErrorException: If the library cannot be loaded\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.mass_densities_to_mole_fractions-Tuple{Vector{Float64}, Vector{Float64}}","page":"Home","title":"MTCR.mass_densities_to_mole_fractions","text":"mass_densities_to_mole_fractions(\n    mass_densities,\n    molecular_weights\n)\n\n\nConvert mass densities to mole fractions.\n\nArguments\n\nmass_densities::Vector{Float64}: Species mass densities (g/cm³)\nmolecular_weights::Vector{Float64}: Species molecular weights (g/mol)\n\nReturns\n\nVector of mole fractions\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.mole_fractions_to_mass_densities-Tuple{Vector{Float64}, Vector{Float64}, Float64}","page":"Home","title":"MTCR.mole_fractions_to_mass_densities","text":"mole_fractions_to_mass_densities(\n    mole_fractions,\n    molecular_weights,\n    total_number_density\n)\n\n\nConvert mole fractions to mass densities.\n\nArguments\n\nmole_fractions::Vector{Float64}: Species mole fractions\nmolecular_weights::Vector{Float64}: Species molecular weights (g/mol)\ntotal_number_density::Float64: Total number density (1/cm³)\n\nReturns\n\nVector of mass densities (g/cm³)\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.prepare_arrays_for_fortran-Tuple","page":"Home","title":"MTCR.prepare_arrays_for_fortran","text":"prepare_arrays_for_fortran(arrays)\n\n\nPrepare Julia arrays for passing to Fortran.\n\nFortran expects column-major arrays, which Julia uses natively. This function ensures proper memory layout and type consistency.\n\nArguments\n\narrays...: Variable number of Julia arrays to prepare\n\nReturns\n\nTuple of arrays ready for Fortran ccall\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.set_electronic_boltzmann_wrapper-Tuple{Vector{Float64}, Float64, Float64, Float64}","page":"Home","title":"MTCR.set_electronic_boltzmann_wrapper","text":"set_electronic_boltzmann_wrapper(rho_sp, tex, trot, tvib)\n\n\nSet electronic state densities to Boltzmann distribution.\n\nArguments\n\nrho_sp::Vector{Float64}: Species densities (mass/volume)\ntex::Float64: Electronic temperature (K)\ntrot::Float64: Rotational temperature (K)\ntvib::Float64: Vibrational temperature (K)\n\nReturns\n\nMatrix{Float64}: Electronic state densities in Boltzmann distribution\n\nThrows\n\nErrorException: If MTCR library is not loaded or not initialized\nArgumentError: If temperatures ≤ 0 or arrays are invalid\n\n\n\n\n\n","category":"method"},{"location":"#MTCR.validate_species_data-Tuple{Vector{String}, Vector{String}, Vector{Float64}}","page":"Home","title":"MTCR.validate_species_data","text":"validate_species_data(\n    species_names,\n    mtcr_species,\n    densities\n)\n\n\nValidate species data consistency between Julia and MTCR.\n\nArguments\n\nspecies_names::Vector{String}: Species names from configuration\nmtcr_species::Vector{String}: Species names from MTCR\ndensities::Vector{Float64}: Species densities\n\nReturns\n\ntrue if validation passes, throws error otherwise\n\n\n\n\n\n","category":"method"}]
}
