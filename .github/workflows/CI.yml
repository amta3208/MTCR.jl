name: CI
on:
  push:
    branches:
      - main
    tags: ['*']
  pull_request:
  workflow_dispatch:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions: # needed to allow julia-actions/cache to proactively delete old caches that it has created
      actions: write
      contents: read
    env:
      MTCR_RELEASE_VERSION: v0.1.0
    strategy:
      fail-fast: false
      matrix:
        include:
          - version: '1.10'
            os: macos-latest
            arch: aarch64
          - version: '1'
            os: macos-latest
            arch: aarch64
    steps:
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - name: Download private dylib (macOS arm64)
        if: matrix.os == 'macos-latest' && matrix.arch == 'aarch64'
        env:
          GH_TOKEN: ${{ secrets.BINARIES_PAT }}
          VER: ${{ env.MTCR_RELEASE_VERSION }}
        run: |
          set -euo pipefail
          mkdir -p test/lib
          gh release download "$VER" \
            --repo amta3208/mtcr-binaries \
            --pattern "mtcr-${VER}-macos-arm64.dylib" \
            --dir test/lib
          echo "MTCR_LIB_PATH=$(pwd)/test/lib/mtcr-${VER}-macos-arm64.dylib" >> "$GITHUB_ENV"
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    permissions:
      actions: write # needed to allow julia-actions/cache to proactively delete old caches that it has created
      contents: write
      statuses: write
    steps:
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - uses: julia-actions/cache@v2
      - name: Configure doc environment
        shell: julia --project=docs --color=yes {0}
        run: |
          using Pkg
          Pkg.develop(PackageSpec(path=pwd()))
          Pkg.instantiate()
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-docdeploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
      - name: Run doctests
        shell: julia --project=docs --color=yes {0}
        run: |
          using Documenter: DocMeta, doctest
          using MTCR
          DocMeta.setdocmeta!(MTCR, :DocTestSetup, :(using MTCR); recursive=true)
          doctest(MTCR)
